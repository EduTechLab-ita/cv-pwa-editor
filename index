import React, { useState, useEffect } from 'react';
import { Save, Eye, Download, Edit3, Plus, Trash2, FileText, Wifi, WifiOff, Download as InstallIcon, RotateCw, Settings, Share2, Palette } from 'lucide-react';

const CVEditor = () => {
  // PWA States
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [showInstallPrompt, setShowInstallPrompt] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [isUpdateAvailable, setIsUpdateAvailable] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);

  // Stato iniziale basato sul CV di Fabio
  const [cvData, setCvData] = useState({
    personalInfo: {
      name: 'Fabio Rizzotto',
      nationality: 'Italiana',
      birthDate: '04/04/1975',
      phone: '(+39) 3402592717',
      email: 'fabiorizzotto75@gmail.com',
      address: 'Via Unità d\'Italia 36/A, 25023 Gottolengo (Italia)'
    },
    profile: 'Docente di Scuola Primaria con esperienza pluriennale e formazione specialistica in Coding, Pensiero Computazionale, Robotica Educativa, Intelligenza Artificiale e Nuove Tecnologie...',
    workExperience: [
      {
        id: 1,
        startDate: '02/2024',
        endDate: 'Ad oggi',
        title: 'Componente del Gruppo STEM dell\'Ufficio Scolastico Territoriale di Brescia',
        company: 'UAT BS, Brescia, Italia',
        description: 'Questo gruppo di docenti volontari nasce, in base alle proprie competenze, su iniziativa della Referente STEM UAT Brescia...',
        isNew: false
      }
    ],
    education: [
      {
        id: 1,
        date: 'Settembre 2024',
        title: 'Generative AI for Educators Certificate',
        institution: 'Google Ads - Certification, Milano, Italia',
        description: 'Certificazione Generative AI for Educators Certificate rilasciata da Google Ads in Intelligenza Artificiale, T.I.C., Pensiero Computazionale, Coding, Robotica Educativa, A.I. e Nuove Metodologie Didattiche.',
        level: 'Livello 8 QEQ',
        isNew: true,
        link: 'https://drive.google.com/file/d/1iRs73WSJ8nu09siJRUzsMeN5-5ZwCVdP/view?usp=sharing'
      },
      {
        id: 2,
        date: 'Maggio 2024',
        title: 'Google Ads - Measurement Certification',
        institution: 'Google Ads - Certification, Milano, Italia',
        description: 'Certificazione Google Ads - Measurement Certification rilasciata da Google Ads in T.I.C., Pensiero Computazionale, Coding, Robotica Educativa, A.I. e Nuove Metodologie Didattiche.',
        level: 'Livello 7 QEQ',
        isNew: false,
        link: 'https://drive.google.com/file/d/1GIm1dA_4qe9Dxt8T3Tk8SkwSULj2B2qk/view?usp=drive_link'
      },
      {
        id: 3,
        date: '01/09/1991 - Giu 2000',
        title: 'Diploma Magistrale in Scienze dell\'Educazione',
        institution: 'Centro Studi "A. Zammarchi" Leg. Ric., Brescia',
        description: 'Diploma Magistrale (ante 2001) con Abilitazione all\'Insegnamento nella Scuola Primaria e nella Scuola dell\'Infanzia.',
        level: 'Livello 8 QEQ',
        isNew: false,
        link: ''
      }
    ],
    skills: {
      ai: {
        title: 'Competenze in Intelligenza Artificiale e Robotica Educativa',
        content: 'Generative AI for Educators Certificate (Google, 2024) - Livello 8 QEQ. Google Ads - Measurement Certification (Google, 2024) - Livello 7 QEQ. Esperto nell\'implementazione di strumenti AI per la didattica quotidiana. Formatore certificato per l\'integrazione etica dell\'Intelligenza Artificiale. Competenze in ChatGPT, Gemini AI, e strumenti di AI generativa educativa.',
        isNew: true
      },
      digital: {
        title: 'Competenze Digitali Generali',
        items: [
          { name: 'Elaborazione delle informazioni', level: 'AVANZATO', numeric: 'Livello 6/6' },
          { name: 'Comunicazioni', level: 'AVANZATO', numeric: 'Livello 6/6' },
          { name: 'Creazione di contenuti', level: 'AVANZATO', numeric: 'Livello 6/6' },
          { name: 'Livelli di sicurezza', level: 'AVANZATO', numeric: 'Livello 6/6' },
          { name: 'Problem solving', level: 'AVANZATO', numeric: 'Livello 6/6' }
        ]
      },
      platforms: {
        title: 'Piattaforme Cloud e Amministrative',
        items: [
          'Microsoft Office 365 - Gestione tecnica e amministrativa',
          'Google Workspace for Education - Gestione completa',
          'Microsoft Azure Active Directory ed Exchange',
          'Microsoft Teams - Gestione tecnica professionale',
          'Google Classroom e Workspace',
          'Registro Elettronico Spaggiari - Programmazione',
          'Software O.D.I. Spaggiari - Orario scolastico',
          'Gestione piattaforme social a carattere aziendale'
        ]
      },
      languages: {
        italian: 'Madrelingua',
        english: 'A1 Principiante (Ascolto)',
        french: 'A1 Principiante (Ascolto)'
      },
      personal: {
        communication: [
          'Collaboratore efficace e capace di contribuire ai progetti di gruppo',
          'Ottime capacità di networking',
          'Abilità nel fornire istruzioni e indicazioni chiare',
          'Efficacia nella comunicazione tramite canali digitali',
          'Eccellenti capacità di comunicazione scritta e orale',
          'Capacità di parlare in pubblico con sicurezza',
          'Ottime capacità di presentazione a gruppi'
        ],
        organizational: [
          'Capacità di adattamento a diversi contesti culturali e aziendali',
          'Esperienza nel guidare team inter-funzionali',
          'Ottime competenze di gestione dei team',
          'Capacità di lavorare in multitasking, in ambienti dinamici e sotto pressione',
          'Proattivo nel prendere l\'iniziativa',
          'Ottime competenze di project management',
          'Orientato all\'obiettivo e ai risultati'
        ]
      }
    },
    formatore: [
      {
        id: 1,
        period: 'Ottobre 2023 - Giugno 2025',
        title: 'PNRR - DM66 Formazione Docenti',
        hours: '342 ore totali',
        institutions: 'Formazione Docenti per 9 Istituti della Lombardia',
        topics: 'Coding e Robotica Educativa, Intelligenza Artificiale, Digital Storytelling, Google Workspace e Tecnologie Didattiche innovative',
        details: [
          'I.C. di Verolanuova: 147 ore (9 corsi) - Lego, AI, Storytelling, Monitor, Coding e Robotica',
          'Formazione Prevalle-Villanuova: 90 ore - Coding e Robotica completa',
          'I.C. di Gottolengo: 50 ore (4 corsi) - Google Workspace, Robotica, AI, Transizione Digitale',
          'I.C. di Borgo San Giacomo: 12 ore - Digital Storytelling, Lego Spike, LIM ViewSonic',
          'I.C. di Torbole Casaglia: 10 ore - Intelligenza Artificiale ed Etica nella Didattica',
          'I.C. di Lograto: 10 ore - Intelligenza Artificiale ed Etica nella Didattica',
          'I.C. "Falcone e Borsellino" Offanengo: 10 ore - Lego',
          'I.C. di Remedello: 10 ore - INF+PRI',
          'Istituto Canossiano Brescia: 3 ore - Scuole paritarie'
        ],
        isNew: true
      }
    ]
  });

  const [activeTab, setActiveTab] = useState('edit');
  const [editingSection, setEditingSection] = useState('personalInfo');

  // Carica i dati salvati al mount
  useEffect(() => {
    const savedData = localStorage.getItem('cvData');
    const hasVisited = localStorage.getItem('hasVisited');
    
    if (savedData) {
      setCvData(JSON.parse(savedData));
    }
    
    // Mostra welcome solo per nuovi utenti
    if (!hasVisited) {
      setShowWelcome(true);
      localStorage.setItem('hasVisited', 'true');
    }
  }, []);

  // PWA Setup e Service Worker Registration
  useEffect(() => {
    // Registra Service Worker
    if ('serviceWorker' in navigator) {
      registerServiceWorker();
    }

    // Gestione eventi PWA
    setupPWAEventListeners();

    // Controlla se è già installata
    if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {
      setIsInstalled(true);
    }

    // Gestione stato online/offline
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Registrazione Service Worker
  const registerServiceWorker = async () => {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js');
      console.log('SW registered successfully:', registration);

      // Controlla aggiornamenti
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        if (newWorker) {
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              setIsUpdateAvailable(true);
            }
          });
        }
      });
    } catch (error) {
      console.error('SW registration failed:', error);
    }
  };

  // Setup event listeners per PWA
  const setupPWAEventListeners = () => {
    // Prompt installazione
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setShowInstallPrompt(true);
    });

    // App installata
    window.addEventListener('appinstalled', () => {
      setIsInstalled(true);
      setShowInstallPrompt(false);
      setDeferredPrompt(null);
    });
  };

  // Installa PWA
  const installPWA = async () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      console.log('Install prompt result:', outcome);
      setDeferredPrompt(null);
      setShowInstallPrompt(false);
    }
  };

  // Aggiorna l'app
  const updateApp = () => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.getRegistration().then((registration) => {
        if (registration && registration.waiting) {
          registration.waiting.postMessage({ type: 'SKIP_WAITING' });
          window.location.reload();
        }
      });
    }
  };

  // Salva automaticamente i dati
  useEffect(() => {
    localStorage.setItem('cvData', JSON.stringify(cvData));
  }, [cvData]);

  const updatePersonalInfo = (field, value) => {
    setCvData(prev => ({
      ...prev,
      personalInfo: {
        ...prev.personalInfo,
        [field]: value
      }
    }));
  };

  const addWorkExperience = () => {
    const newWork = {
      id: Date.now(),
      startDate: '',
      endDate: '',
      title: '',
      company: '',
      description: '',
      isNew: false
    };
    setCvData(prev => ({
      ...prev,
      workExperience: [...prev.workExperience, newWork]
    }));
  };

  const updateWorkExperience = (id, field, value) => {
    setCvData(prev => ({
      ...prev,
      workExperience: prev.workExperience.map(item =>
        item.id === id ? { ...item, [field]: value } : item
      )
    }));
  };

  const addEducation = () => {
    const newEducation = {
      id: Date.now(),
      date: '',
      title: '',
      institution: '',
      description: '',
      level: '',
      isNew: false,
      link: ''
    };
    setCvData(prev => ({
      ...prev,
      education: [...prev.education, newEducation]
    }));
  };

  const updateEducation = (id, field, value) => {
    setCvData(prev => ({
      ...prev,
      education: prev.education.map(item =>
        item.id === id ? { ...item, [field]: value } : item
      )
    }));
  };

  const deleteEducation = (id) => {
    setCvData(prev => ({
      ...prev,
      education: prev.education.filter(item => item.id !== id)
    }));
  };

  const addFormatore = () => {
    const newFormatore = {
      id: Date.now(),
      period: '',
      title: '',
      hours: '',
      institutions: '',
      topics: '',
      details: [],
      isNew: false
    };
    setCvData(prev => ({
      ...prev,
      formatore: [...prev.formatore, newFormatore]
    }));
  };

  const updateFormatore = (id, field, value) => {
    setCvData(prev => ({
      ...prev,
      formatore: prev.formatore.map(item =>
        item.id === id ? { ...item, [field]: value } : item
      )
    }));
  };

  const deleteFormatore = (id) => {
    setCvData(prev => ({
      ...prev,
      formatore: prev.formatore.filter(item => item.id !== id)
    }));
  };

  const updateSkillItem = (section, index, value) => {
    setCvData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,
        [section]: {
          ...prev.skills[section],
          items: prev.skills[section].items.map((item, i) => 
            i === index ? value : item
          )
        }
      }
    }));
  };

  // Advanced Settings Functions
  const exportAsJSON = () => {
    const timestamp = new Date().toISOString().split('T')[0];
    const fileName = `cv-${cvData.personalInfo.name.replace(/\s+/g, '-').toLowerCase()}-${timestamp}`;
    
    const exportData = {
      meta: {
        version: '1.0.0',
        exported: new Date().toISOString(),
        app: 'CV PWA Editor',
        author: 'Fabio Rizzotto'
      },
      data: cvData
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${fileName}.json`;
    link.click();
    URL.revokeObjectURL(url);
    
    // Notifica successo
    alert('✅ Backup esportato con successo! Conserva questo file per importare i tuoi dati in futuro.');
  };

  const importData = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    if (file.type !== 'application/json') {
      alert('⚠️ Seleziona un file JSON valido.');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const imported = JSON.parse(e.target.result);
        
        // Verifica formato dati
        const importedData = imported.data || imported; // Supporta sia il nuovo formato che quello legacy
        
        if (!importedData.personalInfo || !importedData.personalInfo.name) {
          throw new Error('File JSON non valido: mancano le informazioni personali');
        }
        
        // Conferma importazione
        const confirmImport = window.confirm(
          `🔄 Importare i dati di "${importedData.personalInfo.name}"?\n\n` +
          `⚠️ ATTENZIONE: Tutti i dati attuali verranno sostituiti.\n\n` +
          `💡 Consiglio: Esporta un backup dei dati attuali prima di procedere.`
        );
        
        if (confirmImport) {
          setCvData(importedData);
          alert('✅ Dati importati con successo!');
          
          // Reset la sezione editing per mostrare i nuovi dati
          setEditingSection('personalInfo');
        }
      } catch (error) {
        console.error('Errore importazione:', error);
        alert(`❌ Errore nell'importazione: ${error.message}\n\nAssicurati che il file sia un backup valido esportato da questa app.`);
      }
    };
    reader.readAsText(file);
    
    // Reset input file
    event.target.value = '';
  };

  const resetToTemplate = () => {
    const confirmReset = window.confirm(
      '🔄 Ripristinare il template iniziale?\n\n' +
      '⚠️ ATTENZIONE: Tutti i dati attuali verranno cancellati.\n\n' +
      '💡 Consiglio: Esporta un backup prima di procedere.'
    );
    
    if (confirmReset) {
      // Ripristina template iniziale
      const templateData = {
        personalInfo: {
          name: 'Il Tuo Nome',
          nationality: 'Italiana',
          birthDate: 'GG/MM/AAAA',
          phone: '(+39) 123 456 7890',
          email: 'tuaemail@esempio.com',
          address: 'Via Esempio 123, 12345 Città (Provincia)'
        },
        profile: 'Descrivi qui il tuo profilo professionale, le tue competenze principali e gli obiettivi di carriera. Questo è uno spazio importante per presentarti in modo efficace ai potenziali datori di lavoro.',
        workExperience: [
          {
            id: Date.now(),
            startDate: 'MM/AAAA',
            endDate: 'MM/AAAA o "Ad oggi"',
            title: 'Titolo della Posizione',
            company: 'Nome Azienda, Città',
            description: 'Descrivi qui le tue responsabilità, risultati ottenuti e competenze sviluppate in questo ruolo.',
            isNew: false
          }
        ],
        education: [
          {
            id: Date.now() + 1,
            date: 'AAAA',
            title: 'Titolo di Studio o Certificazione',
            institution: 'Nome Istituzione, Città',
            description: 'Descrizione del percorso formativo e delle competenze acquisite.',
            level: '',
            isNew: false,
            link: ''
          }
        ],
        skills: cvData.skills, // Mantieni la struttura skills
        formatore: []
      };
      
      setCvData(templateData);
      setEditingSection('personalInfo');
      alert('✅ Template ripristinato! Puoi iniziare a compilare il tuo CV.');
    }
  };

  const shareCV = async () => {
    const shareData = {
      title: `CV di ${cvData.personalInfo.name}`,
      text: 'Ecco il mio Curriculum Vitae creato con CV PWA Editor',
      url: window.location.href
    };
    
    if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.log('Condivisione annullata');
      }
    } else {
      // Fallback: copia link negli appunti
      try {
        await navigator.clipboard.writeText(window.location.href);
        alert('🔗 Link copiato negli appunti! Condividilo per far vedere il tuo CV.');
      } catch (error) {
        // Fallback del fallback
        prompt('📋 Copia questo link per condividere:', window.location.href);
      }
    }
  };

  const generatePDF = () => {
    window.print();
  };

  const PersonalInfoEditor = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-blue-800">Informazioni Personali</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-1">Nome Completo</label>
          <input
            type="text"
            value={cvData.personalInfo.name}
            onChange={(e) => updatePersonalInfo('name', e.target.value)}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Nazionalità</label>
          <input
            type="text"
            value={cvData.personalInfo.nationality}
            onChange={(e) => updatePersonalInfo('nationality', e.target.value)}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Data di Nascita</label>
          <input
            type="text"
            value={cvData.personalInfo.birthDate}
            onChange={(e) => updatePersonalInfo('birthDate', e.target.value)}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Telefono</label>
          <input
            type="text"
            value={cvData.personalInfo.phone}
            onChange={(e) => updatePersonalInfo('phone', e.target.value)}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Email</label>
          <input
            type="email"
            value={cvData.personalInfo.email}
            onChange={(e) => updatePersonalInfo('email', e.target.value)}
            className="w-full p-2 border rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Indirizzo</label>
          <input
            type="text"
            value={cvData.personalInfo.address}
            onChange={(e) => updatePersonalInfo('address', e.target.value)}
            className="w-full p-2 border rounded-md"
          />
        </div>
      </div>
    </div>
  );

  const WorkExperienceEditor = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-blue-800">Esperienza Lavorativa</h3>
        <button
          onClick={addWorkExperience}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
        >
          <Plus size={16} />
          Aggiungi Esperienza
        </button>
      </div>
      
      {cvData.workExperience.map((work) => (
        <div key={work.id} className="border rounded-lg p-4 bg-gray-50">
          <div className="flex justify-between items-start mb-4">
            <h4 className="font-semibold">Esperienza #{work.id}</h4>
            <button
              onClick={() => deleteWorkExperience(work.id)}
              className="text-red-600 hover:text-red-800"
            >
              <Trash2 size={16} />
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-1">Data Inizio</label>
              <input
                type="text"
                value={work.startDate}
                onChange={(e) => updateWorkExperience(work.id, 'startDate', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="es. 01/2024"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Data Fine</label>
              <input
                type="text"
                value={work.endDate}
                onChange={(e) => updateWorkExperience(work.id, 'endDate', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="es. Ad oggi"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Titolo/Ruolo</label>
              <input
                type="text"
                value={work.title}
                onChange={(e) => updateWorkExperience(work.id, 'title', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Titolo del ruolo"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Azienda/Istituzione</label>
              <input
                type="text"
                value={work.company}
                onChange={(e) => updateWorkExperience(work.id, 'company', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Nome azienda, città"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Descrizione</label>
            <textarea
              value={work.description}
              onChange={(e) => updateWorkExperience(work.id, 'description', e.target.value)}
              className="w-full p-2 border rounded-md h-32"
              placeholder="Descrivi le tue responsabilità e achievements..."
            />
          </div>
        </div>
      ))}
    </div>
  );

  const EducationEditor = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-blue-800">Istruzione e Formazione</h3>
        <button
          onClick={addEducation}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
        >
          <Plus size={16} />
          Aggiungi Formazione
        </button>
      </div>
      
      {cvData.education.map((edu) => (
        <div key={edu.id} className={`border rounded-lg p-4 ${edu.isNew ? 'bg-yellow-50 border-yellow-200' : 'bg-gray-50'}`}>
          <div className="flex justify-between items-start mb-4">
            <h4 className="font-semibold flex items-center gap-2">
              Formazione #{edu.id}
              {edu.isNew && <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs">✨ Nuovo</span>}
            </h4>
            <button
              onClick={() => deleteEducation(edu.id)}
              className="text-red-600 hover:text-red-800"
            >
              <Trash2 size={16} />
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-1">Data/Periodo</label>
              <input
                type="text"
                value={edu.date}
                onChange={(e) => updateEducation(edu.id, 'date', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="es. Settembre 2024"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Livello QEQ (opzionale)</label>
              <input
                type="text"
                value={edu.level}
                onChange={(e) => updateEducation(edu.id, 'level', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="es. Livello 8 QEQ"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Titolo Corso/Diploma</label>
              <input
                type="text"
                value={edu.title}
                onChange={(e) => updateEducation(edu.id, 'title', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Nome del corso o diploma"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Istituzione</label>
              <input
                type="text"
                value={edu.institution}
                onChange={(e) => updateEducation(edu.id, 'institution', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Nome istituzione, città"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Link Certificato (opzionale)</label>
              <input
                type="url"
                value={edu.link}
                onChange={(e) => updateEducation(edu.id, 'link', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="https://drive.google.com/..."
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Descrizione</label>
            <textarea
              value={edu.description}
              onChange={(e) => updateEducation(edu.id, 'description', e.target.value)}
              className="w-full p-2 border rounded-md h-24"
              placeholder="Descrivi il corso, certificazione o titolo di studio..."
            />
          </div>
        </div>
      ))}
    </div>
  );

  const SkillsEditor = () => (
    <div className="space-y-8">
      <h3 className="text-lg font-semibold text-blue-800">Competenze</h3>
      
      {/* Competenze AI */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
        <div className="flex items-center gap-2 mb-4">
          <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs">✨ Evidenziate</span>
          <h4 className="font-semibold text-blue-800">Intelligenza Artificiale e Robotica</h4>
        </div>
        <textarea
          value={cvData.skills.ai.content}
          onChange={(e) => setCvData(prev => ({ 
            ...prev, 
            skills: { 
              ...prev.skills, 
              ai: { ...prev.skills.ai, content: e.target.value } 
            } 
          }))}
          className="w-full p-3 border rounded-md h-32"
          placeholder="Descrivi le tue competenze in AI, robotica educativa e coding..."
        />
      </div>

      {/* Competenze Digitali */}
      <div className="bg-gray-50 border rounded-lg p-6">
        <h4 className="font-semibold text-blue-800 mb-4">Competenze Digitali (DigiCompEU)</h4>
        <div className="space-y-3">
          {cvData.skills.digital.items.map((skill, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-white border rounded">
              <div className="flex-1 mr-4">
                <input
                  type="text"
                  value={skill.name}
                  onChange={(e) => {
                    const newSkill = { ...skill, name: e.target.value };
                    updateSkillItem('digital', index, newSkill);
                  }}
                  className="w-full p-2 border rounded text-sm"
                  placeholder="Nome competenza"
                />
              </div>
              <div className="flex items-center space-x-2">
                <select
                  value={skill.level}
                  onChange={(e) => {
                    const newSkill = { ...skill, level: e.target.value };
                    updateSkillItem('digital', index, newSkill);
                  }}
                  className="px-3 py-1 border rounded text-sm"
                >
                  <option value="BASE">BASE</option>
                  <option value="INTERMEDIO">INTERMEDIO</option>
                  <option value="AVANZATO">AVANZATO</option>
                </select>
                <input
                  type="text"
                  value={skill.numeric}
                  onChange={(e) => {
                    const newSkill = { ...skill, numeric: e.target.value };
                    updateSkillItem('digital', index, newSkill);
                  }}
                  className="w-24 p-1 border rounded text-xs"
                  placeholder="Livello 6/6"
                />
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Piattaforme Cloud */}
      <div className="bg-gray-50 border rounded-lg p-6">
        <h4 className="font-semibold text-blue-800 mb-4">Piattaforme e Software</h4>
        <div className="space-y-2">
          {cvData.skills.platforms.items.map((platform, index) => (
            <div key={index} className="flex items-center space-x-2">
              <input
                type="text"
                value={platform}
                onChange={(e) => {
                  const newPlatforms = [...cvData.skills.platforms.items];
                  newPlatforms[index] = e.target.value;
                  setCvData(prev => ({
                    ...prev,
                    skills: {
                      ...prev.skills,
                      platforms: {
                        ...prev.skills.platforms,
                        items: newPlatforms
                      }
                    }
                  }));
                }}
                className="flex-1 p-2 border rounded text-sm"
                placeholder="Nome piattaforma o software"
              />
              <button
                onClick={() => {
                  const newPlatforms = cvData.skills.platforms.items.filter((_, i) => i !== index);
                  setCvData(prev => ({
                    ...prev,
                    skills: {
                      ...prev.skills,
                      platforms: {
                        ...prev.skills.platforms,
                        items: newPlatforms
                      }
                    }
                  }));
                }}
                className="text-red-600 hover:text-red-800"
              >
                <Trash2 size={16} />
              </button>
            </div>
          ))}
          <button
            onClick={() => {
              setCvData(prev => ({
                ...prev,
                skills: {
                  ...prev.skills,
                  platforms: {
                    ...prev.skills.platforms,
                    items: [...prev.skills.platforms.items, '']
                  }
                }
              }));
            }}
            className="flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm"
          >
            <Plus size={14} />
            Aggiungi piattaforma
          </button>
        </div>
      </div>

      {/* Lingue */}
      <div className="bg-gray-50 border rounded-lg p-6">
        <h4 className="font-semibold text-blue-800 mb-4">Competenze Linguistiche</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">🇮🇹 Italiano</label>
            <input
              type="text"
              value={cvData.skills.languages.italian}
              onChange={(e) => setCvData(prev => ({
                ...prev,
                skills: {
                  ...prev.skills,
                  languages: {
                    ...prev.skills.languages,
                    italian: e.target.value
                  }
                }
              }))}
              className="w-full p-2 border rounded text-sm"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">🇬🇧 Inglese</label>
            <input
              type="text"
              value={cvData.skills.languages.english}
              onChange={(e) => setCvData(prev => ({
                ...prev,
                skills: {
                  ...prev.skills,
                  languages: {
                    ...prev.skills.languages,
                    english: e.target.value
                  }
                }
              }))}
              className="w-full p-2 border rounded text-sm"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">🇫🇷 Francese</label>
            <input
              type="text"
              value={cvData.skills.languages.french}
              onChange={(e) => setCvData(prev => ({
                ...prev,
                skills: {
                  ...prev.skills,
                  languages: {
                    ...prev.skills.languages,
                    french: e.target.value
                  }
                }
              }))}
              className="w-full p-2 border rounded text-sm"
            />
          </div>
        </div>
      </div>
    </div>
  );

  const AdvancedSettingsEditor = () => {
    const [activeSettingsTab, setActiveSettingsTab] = useState('export');

    const exportFormats = [
      { id: 'pdf', name: 'PDF', icon: '📄', description: 'Formato universale per stampa' },
      { id: 'json', name: 'JSON', icon: '⚙️', description: 'Dati strutturati (backup)' },
      { id: 'html', name: 'HTML', icon: '🌐', description: 'Pagina web (in sviluppo)' },
      { id: 'docx', name: 'Word', icon: '📝', description: 'Microsoft Word (in sviluppo)' }
    ];

    const handleExport = (format) => {
      switch (format) {
        case 'pdf':
          window.print();
          break;
        case 'json':
          exportAsJSON();
          break;
        case 'html':
          alert('Funzione HTML in sviluppo. Usa PDF per ora.');
          break;
        case 'docx':
          alert('Funzione Word in sviluppo. Usa PDF per ora.');
          break;
        default:
          console.log('Formato non supportato:', format);
      }
    };

    return (
      <div className="space-y-6">
        <h3 className="text-lg font-semibold text-blue-800">Impostazioni Avanzate</h3>
        
        {/* Tab Navigation */}
        <div className="flex space-x-4 border-b">
          {[
            { id: 'export', label: 'Export & Condivisione', icon: <Download size={16} /> },
            { id: 'templates', label: 'Template', icon: <Palette size={16} /> },
            { id: 'settings', label: 'Impostazioni', icon: <Settings size={16} /> }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveSettingsTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-2 border-b-2 transition-colors ${
                activeSettingsTab === tab.id
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              {tab.icon}
              <span>{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Export & Sharing */}
        {activeSettingsTab === 'export' && (
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold mb-4">Formati di Export</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {exportFormats.map((format) => (
                  <button
                    key={format.id}
                    onClick={() => handleExport(format.id)}
                    className="p-4 border rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors text-center"
                  >
                    <div className="text-2xl mb-2">{format.icon}</div>
                    <div className="font-medium">{format.name}</div>
                    <div className="text-xs text-gray-500 mt-1">{format.description}</div>
                  </button>
                ))}
              </div>
            </div>

            <div>
              <h4 className="font-semibold mb-4">Backup e Ripristino</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">💾</span>
                    <h5 className="font-semibold text-green-800">Backup Completo</h5>
                  </div>
                  <p className="text-sm text-green-700 mb-3">
                    Salva tutti i tuoi dati in un file JSON per importarli in futuro.
                  </p>
                  <button
                    onClick={() => handleExport('json')}
                    className="w-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700"
                  >
                    📤 Esporta Backup
                  </button>
                </div>
                
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">📥</span>
                    <h5 className="font-semibold text-blue-800">Ripristina Backup</h5>
                  </div>
                  <p className="text-sm text-blue-700 mb-3">
                    Carica un file di backup per ripristinare i tuoi dati.
                  </p>
                  <label className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 cursor-pointer text-center block">
                    📂 Carica Backup
                    <input
                      type="file"
                      accept=".json"
                      onChange={importData}
                      className="hidden"
                    />
                  </label>
                </div>
              </div>
              
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <span className="text-yellow-500 text-xl">💡</span>
                  <div>
                    <h5 className="font-semibold text-yellow-800 mb-1">Consigli per il Backup</h5>
                    <ul className="text-sm text-yellow-700 space-y-1">
                      <li>• Esporta regolarmente i tuoi dati per sicurezza</li>
                      <li>• Conserva i backup in un posto sicuro (cloud, email, ecc.)</li>
                      <li>• Il file JSON contiene tutti i tuoi dati e può essere riutilizzato</li>
                      <li>• Puoi condividere il backup per trasferire il CV su altri dispositivi</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <div>
              <h4 className="font-semibold mb-4">Condivisione e Collaborazione</h4>
              <div className="flex flex-wrap gap-4">
                <button
                  onClick={shareCV}
                  className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
                >
                  <Share2 size={16} />
                  <span>Condividi CV</span>
                </button>

                <button
                  onClick={() => handleExport('pdf')}
                  className="flex items-center space-x-2 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700"
                >
                  <Download size={16} />
                  <span>Scarica PDF</span>
                </button>
              </div>
              <p className="text-sm text-gray-500 mt-2">
                Condividi il link dell'app o scarica il PDF per inviare il tuo CV.
              </p>
            </div>
          </div>
        )}

        {/* Templates */}
        {activeSettingsTab === 'templates' && (
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold mb-4">Template Disponibili</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-6 border-2 border-blue-500 bg-blue-50 rounded-lg ring-2 ring-blue-200">
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl">📄</div>
                    <div className="flex-1">
                      <h5 className="font-semibold">Europass Standard</h5>
                      <p className="text-sm text-gray-600">Template ufficiale Europass EU</p>
                      <span className="inline-block mt-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                        ✓ Attivo
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="p-6 border border-gray-200 rounded-lg opacity-50">
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl">✨</div>
                    <div className="flex-1">
                      <h5 className="font-semibold">Moderno</h5>
                      <p className="text-sm text-gray-600">Design pulito e contemporaneo</p>
                      <span className="inline-block mt-2 text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                        🚧 In sviluppo
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <span className="text-yellow-400">⚠️</span>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-yellow-800">
                      Templates in sviluppo
                    </h3>
                    <div className="mt-2 text-sm text-yellow-700">
                      <p>
                        Al momento è attivo solo il template Europass. Altri template saranno disponibili nelle prossime versioni.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Settings */}
        {activeSettingsTab === 'settings' && (
          <div className="space-y-6">
            <div>
              <h4 className="font-semibold mb-4">Preferenze App</h4>
              <div className="space-y-4">
                <label className="flex items-center space-x-3">
                  <input type="checkbox" className="rounded" defaultChecked />
                  <span>Salvataggio automatico</span>
                </label>
                <label className="flex items-center space-x-3">
                  <input type="checkbox" className="rounded" defaultChecked />
                  <span>Notifiche aggiornamenti</span>
                </label>
                <label className="flex items-center space-x-3">
                  <input type="checkbox" className="rounded" />
                  <span>Modalità scura (prossimamente)</span>
                </label>
              </div>
            </div>

            <div>
              <h4 className="font-semibold mb-4">Gestione Dati</h4>
              <div className="space-y-4">
                <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">🔄</span>
                    <h5 className="font-semibold text-orange-800">Ripristina Template</h5>
                  </div>
                  <p className="text-sm text-orange-700 mb-3">
                    Ripristina il template iniziale con dati di esempio. Utile per iniziare da capo.
                  </p>
                  <button 
                    onClick={resetToTemplate}
                    className="w-full bg-orange-600 text-white px-4 py-2 rounded-md hover:bg-orange-700"
                  >
                    🔄 Ripristina Template
                  </button>
                </div>
                
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-2">🗑️</span>
                    <h5 className="font-semibold text-red-800">Cancella Tutto</h5>
                  </div>
                  <p className="text-sm text-red-700 mb-3">
                    Cancella permanentemente tutti i dati salvati. Questa azione non può essere annullata.
                  </p>
                  <button 
                    onClick={() => {
                      if (confirm('🗑️ Sei sicuro di voler cancellare TUTTI i dati?\n\n⚠️ Questa azione non può essere annullata!\n\n💡 Consiglio: Esporta un backup prima di procedere.')) {
                        localStorage.clear();
                        window.location.reload();
                      }
                    }}
                    className="w-full bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700"
                  >
                    🗑️ Cancella Tutto
                  </button>
                </div>
              </div>
            </div>

            <div>
              <h4 className="font-semibold mb-4">Informazioni App</h4>
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <p><strong>Versione:</strong> 1.0.0</p>
                <p><strong>Ultima Modifica:</strong> {new Date().toLocaleString()}</p>
                <p><strong>Spazio Utilizzato:</strong> ~{Math.round(JSON.stringify(cvData).length / 1024)} KB</p>
                <p><strong>Creato da:</strong> Fabio Rizzotto</p>
                <p><strong>Tipo:</strong> Progressive Web App (PWA)</p>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const WelcomeModal = () => {
    if (!showWelcome) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg max-w-md w-full p-6 space-y-4">
          <div className="text-center">
            <div className="text-4xl mb-4">👋</div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">Benvenuto nel CV PWA Editor!</h2>
            <p className="text-gray-600">L'editor professionale per il tuo Curriculum Vitae</p>
          </div>
          
          <div className="space-y-3">
            <div className="flex items-center space-x-3">
              <span className="text-green-500">✅</span>
              <span className="text-sm">Funziona completamente offline</span>
            </div>
            <div className="flex items-center space-x-3">
              <span className="text-green-500">✅</span>
              <span className="text-sm">Salvataggio automatico dei dati</span>
            </div>
            <div className="flex items-center space-x-3">
              <span className="text-green-500">✅</span>
              <span className="text-sm">Export PDF professionale</span>
            </div>
            <div className="flex items-center space-x-3">
              <span className="text-green-500">✅</span>
              <span className="text-sm">Installabile come app</span>
            </div>
            <div className="flex items-center space-x-3">
              <span className="text-green-500">✅</span>
              <span className="text-sm">Backup e ripristino completo</span>
            </div>
          </div>
          
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <div className="flex items-start space-x-2">
              <span className="text-blue-500">💡</span>
              <div className="text-sm">
                <p className="font-semibold text-blue-800">Suggerimento:</p>
                <p className="text-blue-700">Inizia compilando le tue <strong>Informazioni Personali</strong>, poi procedi sezione per sezione. L'app salva automaticamente tutto!</p>
              </div>
            </div>
          </div>
          
          <div className="flex space-x-3">
            <button
              onClick={() => setShowWelcome(false)}
              className="flex-1 bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300"
            >
              Chiudi
            </button>
            <button
              onClick={() => {
                setShowWelcome(false);
                setEditingSection('personalInfo');
              }}
              className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700"
            >
              Inizia Subito!
            </button>
          </div>
          
          <div className="text-center">
            <p className="text-xs text-gray-500">
              Creato da <strong>Fabio Rizzotto</strong> - Formatore di Tecnologie Innovative
            </p>
          </div>
        </div>
      </div>
    );
  };

  const FormatoreEditor = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-blue-800">Esperienza come Formatore</h3>
        <button
          onClick={addFormatore}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
        >
          <Plus size={16} />
          Aggiungi Esperienza Formativa
        </button>
      </div>
      
      {cvData.formatore && cvData.formatore.map((form) => (
        <div key={form.id} className={`border rounded-lg p-4 ${form.isNew ? 'bg-yellow-50 border-yellow-200' : 'bg-gray-50'}`}>
          <div className="flex justify-between items-start mb-4">
            <h4 className="font-semibold flex items-center gap-2">
              Formazione #{form.id}
              {form.isNew && <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs">✨ Nuovo</span>}
            </h4>
            <button
              onClick={() => deleteFormatore(form.id)}
              className="text-red-600 hover:text-red-800"
            >
              <Trash2 size={16} />
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-1">Periodo</label>
              <input
                type="text"
                value={form.period}
                onChange={(e) => updateFormatore(form.id, 'period', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="es. Ottobre 2023 - Giugno 2025"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Ore Totali</label>
              <input
                type="text"
                value={form.hours}
                onChange={(e) => updateFormatore(form.id, 'hours', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="es. 342 ore totali"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Titolo Formazione</label>
              <input
                type="text"
                value={form.title}
                onChange={(e) => updateFormatore(form.id, 'title', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Titolo del corso o progetto formativo"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium mb-1">Istituzioni Coinvolte</label>
              <input
                type="text"
                value={form.institutions}
                onChange={(e) => updateFormatore(form.id, 'institutions', e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder="Scuole e istituzioni coinvolte"
              />
            </div>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Argomenti Trattati</label>
            <textarea
              value={form.topics}
              onChange={(e) => updateFormatore(form.id, 'topics', e.target.value)}
              className="w-full p-2 border rounded-md h-20"
              placeholder="Tematiche principali del corso..."
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Dettagli Specifici (uno per riga)</label>
            <textarea
              value={form.details ? form.details.join('\n') : ''}
              onChange={(e) => updateFormatore(form.id, 'details', e.target.value.split('\n').filter(line => line.trim()))}
              className="w-full p-2 border rounded-md h-32"
              placeholder="I.C. di Verolanuova: 147 ore (9 corsi) - Lego, AI, Storytelling&#10;Formazione Prevalle-Villanuova: 90 ore - Coding e Robotica completa&#10;..."
            />
          </div>
        </div>
      ))}
    </div>
  );

  const CVPreview = () => (
    <div className="cv-preview bg-white shadow-lg" style={{ minHeight: '297mm', width: '210mm', margin: '0 auto' }}>
      <style jsx>{`
        .cv-preview {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          line-height: 1.6;
          color: #333333;
          padding: 40px;
        }
        
        .cv-title {
          text-align: center;
          font-size: 1.8em;
          font-weight: 300;
          color: #003d7a;
          margin: 30px 0 20px 0;
          text-transform: uppercase;
          letter-spacing: 1px;
        }
        
        .page-bar {
          width: calc(100% + 80px);
          margin-left: -40px;
          margin-right: -40px;
          height: 8px;
          background-color: #003d7a;
          margin-bottom: 30px;
        }
        
        .personal-info {
          text-align: center;
          margin-bottom: 30px;
        }
        
        .personal-info h1 {
          font-size: 2.2em;
          font-weight: 300;
          margin: 0;
          color: #333333;
        }
        
        .personal-info-grid {
          margin-top: 15px;
          font-size: 1em;
          display: inline-block;
          text-align: left;
        }
        
        .info-item {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 2px;
        }
        
        .section-title {
          text-transform: uppercase;
          font-weight: bold;
          font-size: 1.2em;
          color: #003d7a;
          padding-bottom: 8px;
          border-bottom: 1px solid #dddddd;
          margin-top: 30px;
          margin-bottom: 20px;
        }
        
        .work-item {
          margin-bottom: 25px;
          background: #f8f9fa;
          padding: 20px;
          border-radius: 8px;
          border-left: 4px solid #003d7a;
        }
        
        .date-range {
          font-size: 0.9em;
          font-style: italic;
          color: #666;
          margin-bottom: 8px;
          font-weight: 600;
        }
        
        .item-header {
          font-weight: bold;
          font-size: 1.1em;
          color: #003d7a;
          margin-bottom: 5px;
        }
        
        .item-subheader {
          font-weight: normal;
          color: #666;
          margin-bottom: 10px;
        }
        
        .new-highlight {
          background: linear-gradient(45deg, #fff9e6, #ffeaa7) !important;
          border-left-color: #ffc107 !important;
        }
        
        .certification-badge {
          display: inline-block;
          background: #28a745;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 0.8em;
          margin-left: 10px;
          vertical-align: middle;
        }
        
        .external-link {
          color: #003d7a;
          text-decoration: none;
          font-weight: 600;
        }
        
        .external-link:hover {
          text-decoration: underline;
        }
        
        .external-link::after {
          content: " 🔗";
          font-size: 0.8em;
        }
        
        .digital-skills-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 15px;
        }

        .skill-item {
          display: flex;
          align-items: center;
          border: 1px solid #e0e0e0;
          padding: 10px;
          border-radius: 4px;
          background: white;
        }
        
        .skill-details {
          flex-grow: 1;
          display: flex;
          justify-content: space-between;
          align-items: center;
          flex-wrap: wrap;
          gap: 10px;
        }
        
        .skill-name {
          font-weight: bold;
        }
        
        .skill-level {
          display: flex;
          gap: 15px;
          align-items: center;
        }

        .level-text {
          background-color: #f8f9fa;
          padding: 2px 8px;
          border-radius: 4px;
          font-weight: bold;
          font-size: 0.9em;
        }

        .level-numeric {
          font-size: 0.9em;
          color: #666;
        }
        
        .skills-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 30px;
        }

        .skill-category {
          background: #f8f9fa;
          padding: 20px;
          border-radius: 8px;
          border-left: 4px solid #003d7a;
        }

        .skill-title {
          font-weight: 600;
          color: #003d7a;
          margin-bottom: 15px;
        }
        
        @media print {
          .cv-preview {
            margin: 0;
            box-shadow: none;
            width: 100%;
            padding: 20px;
          }
        }
      `}</style>
      
      <div className="cv-title">Curriculum Vitae</div>
      <div className="page-bar"></div>
      
      <div className="personal-info">
        <h1>{cvData.personalInfo.name}</h1>
        <div className="personal-info-grid">
          <div className="info-item"><strong>Nazionalità:</strong> {cvData.personalInfo.nationality}</div>
          <div className="info-item"><strong>Data di nascita:</strong> {cvData.personalInfo.birthDate}</div>
          <div className="info-item"><strong>Numero di telefono:</strong> {cvData.personalInfo.phone}</div>
          <div className="info-item"><strong>Indirizzo e-mail:</strong> {cvData.personalInfo.email}</div>
          <div className="info-item"><strong>Abitazione:</strong> {cvData.personalInfo.address}</div>
        </div>
      </div>

      <section>
        <h2 className="section-title">Profilo Professionale</h2>
        <p style={{ textAlign: 'justify' }}>{cvData.profile}</p>
      </section>

      <section>
        <h2 className="section-title">Esperienza Lavorativa</h2>
        {cvData.workExperience.map((work) => (
          <div key={work.id} className="work-item">
            <div className="date-range">{work.startDate} - {work.endDate}</div>
            <div className="item-header">{work.title}</div>
            <div className="item-subheader">{work.company}</div>
            <div style={{ paddingLeft: '5px' }}>
              <p style={{ textAlign: 'justify' }}>{work.description}</p>
            </div>
          </div>
        ))}
      </section>

      <section>
        <h2 className="section-title">Istruzione e Formazione</h2>
        {cvData.education.map((edu) => (
          <div key={edu.id} className={`work-item ${edu.isNew ? 'new-highlight' : ''}`}>
            <div className="date-range">{edu.date}</div>
            <div className="item-header">
              {edu.title}
              {edu.level && <span className="certification-badge">{edu.level}</span>}
            </div>
            <div className="item-subheader">{edu.institution}</div>
            <div style={{ paddingLeft: '5px' }}>
              <p style={{ textAlign: 'justify' }}>
                {edu.description}
                {edu.link && (
                  <span> <a href={edu.link} className="external-link" target="_blank" rel="noopener noreferrer">Consultabile qui</a></span>
                )}
              </p>
            </div>
          </div>
        ))}
      </section>

      <section>
        <h2 className="section-title">Competenze Digitali</h2>
        
        <div className={`work-item ${cvData.skills.ai.isNew ? 'new-highlight' : ''}`}>
          <div className="item-header">{cvData.skills.ai.title}</div>
          <div style={{ paddingLeft: '5px' }}>
            <p style={{ textAlign: 'justify' }}>{cvData.skills.ai.content}</p>
          </div>
        </div>

        <div className="work-item">
          <div className="item-header">{cvData.skills.digital.title}</div>
          <div style={{ paddingLeft: '5px' }}>
            <div className="digital-skills-grid">
              {cvData.skills.digital.items.map((skill, index) => (
                <div key={index} className="skill-item">
                  <div className="skill-details">
                    <span className="skill-name">{skill.name}</span>
                    <div className="skill-level">
                      <span className="level-text">{skill.level}</span>
                      <span className="level-numeric">{skill.numeric}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="work-item">
          <div className="item-header">{cvData.skills.platforms.title}</div>
          <div style={{ paddingLeft: '5px' }}>
            <ul style={{ paddingLeft: '20px', marginTop: '10px' }}>
              {cvData.skills.platforms.items.map((platform, index) => (
                <li key={index} style={{ marginBottom: '5px' }}>{platform}</li>
              ))}
            </ul>
          </div>
        </div>
      </section>

      <section>
        <h2 className="section-title">Competenze Linguistiche</h2>
        <div className="skills-grid">
          <div className="skill-category">
            <div className="skill-title">Madrelingua</div>
            <div>🇮🇹 {cvData.skills.languages.italian}</div>
          </div>
          <div className="skill-category">
            <div className="skill-title">Altre lingue</div>
            <div>🇬🇧 <strong>Inglese</strong> - {cvData.skills.languages.english}</div>
            <div>🇫🇷 <strong>Francese</strong> - {cvData.skills.languages.french}</div>
          </div>
        </div>
      </section>

      {cvData.formatore && cvData.formatore.length > 0 && (
        <section>
          <h2 className="section-title">Esperienza come Formatore</h2>
          {cvData.formatore.map((form) => (
            <div key={form.id} className={`work-item ${form.isNew ? 'new-highlight' : ''}`}>
              <div className="date-range">{form.period}</div>
              <div className="item-header">
                {form.title}
                {form.hours && <span className="certification-badge">{form.hours}</span>}
              </div>
              <div className="item-subheader">{form.institutions}</div>
              <div style={{ paddingLeft: '5px' }}>
                <p style={{ textAlign: 'justify', marginBottom: '10px' }}><strong>{form.topics}</strong></p>
                {form.details && form.details.length > 0 && (
                  <>
                    <p style={{ textAlign: 'justify', marginBottom: '10px' }}><strong>Riepilogo completo delle formazioni erogate:</strong></p>
                    <ul style={{ paddingLeft: '20px', marginTop: '10px' }}>
                      {form.details.map((detail, index) => (
                        <li key={index} style={{ marginBottom: '5px' }}>{detail}</li>
                      ))}
                    </ul>
                  </>
                )}
              </div>
            </div>
          ))}
        </section>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Welcome Modal */}
      <WelcomeModal />
      
      {/* PWA Meta Tags (simulated in JSX) */}
      <div style={{ display: 'none' }}>
        <meta name="theme-color" content="#003d7a" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="CV Editor" />
        <link rel="manifest" href="/manifest.json" />
        <link rel="apple-touch-icon" href="/icon-192x192.png" />
      </div>

      {/* Notifiche PWA */}
      {showInstallPrompt && !isInstalled && (
        <div className="fixed top-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm">
          <div className="flex items-start space-x-3">
            <InstallIcon size={24} className="flex-shrink-0 mt-1" />
            <div className="flex-1">
              <h4 className="font-semibold">Installa CV Editor</h4>
              <p className="text-sm text-blue-100 mt-1">
                Installa l'app per usarla offline e accedervi rapidamente!
              </p>
              <div className="flex space-x-2 mt-3">
                <button
                  onClick={installPWA}
                  className="bg-white text-blue-600 px-3 py-1 rounded text-sm font-medium"
                >
                  Installa
                </button>
                <button
                  onClick={() => setShowInstallPrompt(false)}
                  className="text-blue-100 px-3 py-1 rounded text-sm"
                >
                  Dopo
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {isUpdateAvailable && (
        <div className="fixed top-4 left-4 bg-green-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm">
          <div className="flex items-start space-x-3">
            <RotateCw size={24} className="flex-shrink-0 mt-1" />
            <div className="flex-1">
              <h4 className="font-semibold">Aggiornamento disponibile</h4>
              <p className="text-sm text-green-100 mt-1">
                È disponibile una nuova versione dell'app.
              </p>
              <button
                onClick={updateApp}
                className="bg-white text-green-600 px-3 py-1 rounded text-sm font-medium mt-2"
              >
                Aggiorna ora
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <FileText className="h-8 w-8 text-blue-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">CV PWA Editor</h1>
                <div className="flex items-center space-x-2 text-sm text-gray-500">
                  {isOnline ? (
                    <><Wifi size={14} className="text-green-500" /> <span>Online</span></>
                  ) : (
                    <><WifiOff size={14} className="text-red-500" /> <span>Offline</span></>
                  )}
                  {isInstalled && (
                    <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">
                      📱 App Installata
                    </span>
                  )}
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setActiveTab('edit')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-md ${
                  activeTab === 'edit' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                <Edit3 size={16} />
                <span>Modifica</span>
              </button>
              <button
                onClick={() => setActiveTab('preview')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-md ${
                  activeTab === 'preview' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                <Eye size={16} />
                <span>Anteprima</span>
              </button>
              <button
                onClick={generatePDF}
                className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
              >
                <Download size={16} />
                <span>Stampa PDF</span>
              </button>
              {!isInstalled && showInstallPrompt && (
                <button
                  onClick={installPWA}
                  className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                >
                  <InstallIcon size={16} />
                  <span>Installa App</span>
                </button>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'edit' ? (
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Sidebar Navigation */}
            <div className="lg:col-span-1">
              <nav className="bg-white rounded-lg shadow-sm p-4">
                <h2 className="font-semibold text-gray-900 mb-4">Sezioni</h2>
                <ul className="space-y-2">
                  {[
                    { id: 'personalInfo', label: 'Info Personali', icon: '👤' },
                    { id: 'profile', label: 'Profilo', icon: '📝' },
                    { id: 'workExperience', label: 'Esperienza', icon: '💼' },
                    { id: 'education', label: 'Formazione', icon: '🎓' },
                    { id: 'formatore', label: 'Formatore', icon: '🎯' },
                    { id: 'skills', label: 'Competenze', icon: '⚡' },
                    { id: 'advanced', label: 'Impostazioni', icon: '⚙️' }
                  ].map((section) => (
                    <li key={section.id}>
                      <button
                        onClick={() => setEditingSection(section.id)}
                        className={`w-full text-left flex items-center space-x-3 px-3 py-2 rounded-md transition-colors ${
                          editingSection === section.id
                            ? 'bg-blue-100 text-blue-700'
                            : 'text-gray-700 hover:bg-gray-100'
                        }`}
                      >
                        <span>{section.icon}</span>
                        <span>{section.label}</span>
                        {section.id === 'formatore' && (
                          <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs ml-auto">Nuovo</span>
                        )}
                        {section.id === 'advanced' && (
                          <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs ml-auto">Pro</span>
                        )}
                      </button>
                    </li>
                  ))}
                </ul>
              </nav>
            </div>

            {/* Editor Content */}
            <div className="lg:col-span-3">
              <div className="bg-white rounded-lg shadow-sm p-6">
                {editingSection === 'personalInfo' && <PersonalInfoEditor />}
                {editingSection === 'profile' && <ProfileEditor />}
                {editingSection === 'workExperience' && <WorkExperienceEditor />}
                {editingSection === 'education' && <EducationEditor />}
                {editingSection === 'formatore' && <FormatoreEditor />}
                {editingSection === 'skills' && <SkillsEditor />}
                {editingSection === 'advanced' && <AdvancedSettingsEditor />}
              </div>
            </div>
          </div>
        ) : (
          <div className="flex justify-center">
            <CVPreview />
          </div>
        )}
      </main>

      {/* Status Bar */}
      <div className="fixed bottom-4 right-4 space-y-2">
        <div className="bg-green-100 text-green-800 px-4 py-2 rounded-md shadow-sm">
          <div className="flex items-center space-x-2">
            <Save size={16} />
            <span className="text-sm">Salvato automaticamente</span>
          </div>
        </div>
        
        {!isOnline && (
          <div className="bg-yellow-100 text-yellow-800 px-4 py-2 rounded-md shadow-sm">
            <div className="flex items-center space-x-2">
              <WifiOff size={16} />
              <span className="text-sm">Modalità offline attiva</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CVEditor;
